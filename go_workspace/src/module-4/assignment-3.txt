Certainly! I'll guide you through implementing the Producer-Consumer pattern in Go using goroutines and channels step by step. Below is a detailed code example with comments.

go
Copy code
package main

import (
	"fmt"
	"math/rand"
	"sync"
	"time"
)

// Data structure to represent items produced and consumed.
type Item struct {
	ID int
}

// Number of producers and consumers.
const numProducers = 3
const numConsumers = 2

// Number of items to be produced.
const numItems = 10

func main() {
	rand.Seed(time.Now().UnixNano())

	// Create a shared channel for producers and consumers.
	dataChannel := make(chan Item, numItems)

	// Use a WaitGroup to ensure all producers and consumers finish.
	var wg sync.WaitGroup

	// Start producer goroutines.
	for i := 0; i < numProducers; i++ {
		wg.Add(1)
		go producer(i, dataChannel, &wg)
	}

	// Start consumer goroutines.
	for i := 0; i < numConsumers; i++ {
		wg.Add(1)
		go consumer(i, dataChannel, &wg)
	}

	// Wait for all producers and consumers to finish.
	wg.Wait()

	// Close the dataChannel to signal completion.
	close(dataChannel)

	fmt.Println("All producers and consumers finished.")
}

// producer generates items and sends them to the dataChannel.
func producer(id int, ch chan Item, wg *sync.WaitGroup) {
	defer wg.Done()

	for i := 0; i < numItems; i++ {
		item := Item{ID: i}
		fmt.Printf("Producer %d produces item %d\n", id, item.ID)
		ch <- item // Send item to dataChannel
		time.Sleep(time.Duration(rand.Intn(100)) * time.Millisecond)
	}
}

// consumer receives items from the dataChannel and processes them.
func consumer(id int, ch chan Item, wg *sync.WaitGroup) {
	defer wg.Done()

	for item := range ch {
		fmt.Printf("Consumer %d consumes item %d\n", id, item.ID)
		processItem(item)
	}
}

// processItem simulates item processing.
func processItem(item Item) {
	// Simulate processing time.
	time.Sleep(time.Duration(rand.Intn(100)) * time.Millisecond)
}

In this code:

We define the Item struct to represent the items that producers generate and consumers consume.

We create a shared channel dataChannel for communication between producers and consumers. This channel is used to pass Item values.

We set the number of producers, consumers, and items to be produced.

In the main function, we seed the random number generator and create a sync.WaitGroup named wg to ensure that all producers and consumers finish before exiting the program.

We start multiple producer goroutines, each simulating the production of items by sending them to the dataChannel.

We start multiple consumer goroutines, each consuming items from the dataChannel and processing them.

The processItem function simulates item processing with a random time delay.

After all producers and consumers have finished their work, we close the dataChannel to signal completion.

We print a message to indicate that all producers and consumers have finished.

This code simulates the Producer-Consumer pattern where multiple producers generate items concurrently, and multiple consumers consume and process them concurrently using goroutines and channels.




